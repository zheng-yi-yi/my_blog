import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as t}from"./app-BwndZQ1G.js";const n="/my_blog/assets/image-20240719000440651-BFwJpl5n.png",a={},l=t(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>在小程序开发中，页面的结构和样式的编写与传统的Web开发有一点点不同。</p><p>在Web开发中，页面的结构由HTML编写，使用了如 <code>div</code>、<code>p</code>、<code>img</code>、<code>a</code> 等标签来构建页面的骨架。而页面的样式（外观）由CSS负责，通过类选择器（<code>.class</code>）、ID选择器（<code>#id</code>）等规则来定义元素的外观和布局。但在开发微信小程序时，并不是使用HTML标签，而是使用小程序提供的标记语言和样式语言来代替HTML和CSS。</p><p>具体的，小程序使用WXML来进行页面结构的编写。WXML与HTML相似，并将标签称为组件，如view、text、image、navigator等。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/" target="_blank" rel="noopener noreferrer">WXML</a>（WeiXin Markup Language）是框架设计的一套标签语言，结合<a href="https://developers.weixin.qq.com/miniprogram/dev/component/index.html" target="_blank" rel="noopener noreferrer">基础组件</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html" target="_blank" rel="noopener noreferrer">事件系统</a>，可以构建出页面的结构。</p></div><p>对于样式编写，小程序使用WXSS，它是对CSS的扩充和修改。WXSS支持大部分CSS的特性，但也引入了一些特有的特性，比如尺寸单位rpx。需要注意的是，WXSS仅支持部分CSS选择器，同时具有全局样式与局部样式的概念。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html" target="_blank" rel="noopener noreferrer">WXSS</a> (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式。与 CSS 相比，WXSS 扩展的特性有尺寸单位和样式导入。</p></div><h2 id="组件-wxml" tabindex="-1"><a class="header-anchor" href="#组件-wxml"><span>组件 - WXML</span></a></h2><h3 id="常用组件" tabindex="-1"><a class="header-anchor" href="#常用组件"><span>常用组件</span></a></h3><table><thead><tr><th>组件名称</th><th>描述</th></tr></thead><tbody><tr><td><strong>view 组件</strong></td><td>相当于 HTML 中的 div 标签，是一个容器组件，可以用来包含其他组件。</td></tr><tr><td><strong>swiper 和 swiper-item 组件</strong></td><td>swiper 是滑块视图容器，常用于制作轮播图。swiper-item 必须是 swiper 组件中的子组件，用来指定每个滑块的内容。</td></tr><tr><td><strong>image 组件</strong></td><td>用于显示图片，可以设置图片的源地址、模式等属性。</td></tr><tr><td><strong>text 组件</strong></td><td>用于显示文本，可以包含多个 text 组件，并且可以通过嵌套来实现文本的部分样式设置。</td></tr><tr><td><strong>navigator 组件</strong></td><td>用于页面跳转，可以设置跳转的目标页面路径，类似于 HTML 中的 a 标签。</td></tr><tr><td><strong>scroll-view 组件</strong></td><td>用于创建一个可滚动的视图区域，可以设置水平或垂直滚动，以及滚动到指定位置的功能。</td></tr></tbody></table><h3 id="首页结构" tabindex="-1"><a class="header-anchor" href="#首页结构"><span>首页结构</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- home.wxml - 首页 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 轮播图区域 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;swiper-container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 公司信息 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;company-info&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 商品导航 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;goods-nav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 推荐商品 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;hot-goods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+n+`" alt="image-20240719000440651" tabindex="0" loading="lazy"><figcaption>image-20240719000440651</figcaption></figure><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><h2 id="样式-wxss" tabindex="-1"><a class="header-anchor" href="#样式-wxss"><span>样式 - WXSS</span></a></h2><h3 id="rpx" tabindex="-1"><a class="header-anchor" href="#rpx"><span>rpx</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>rpx</code> 是微信小程序中引入的一种<strong>自适应单位</strong>，用于解决不同设备屏幕宽度多样化带来的适配问题。与传统的 <code>px</code>（像素）单位不同，<code>rpx</code> 能够根据屏幕宽度自动进行缩放，实现不同设备上的界面自适应。</p></div><p>在微信小程序中，无论手机型号如何，屏幕宽度都被定义为 <code>750rpx</code>。在这个定义下，我们定义的样式就可以根据不同手机根据屏幕宽度来进行自适应。</p><p>官方建议，设计师可以使用 iPhone6 作为视觉稿的标准。 iPhone6 的物理像素宽度为375px，那么，在iPhone6屏幕上，1rpx等于0.5px。</p><h3 id="全局样式与局部样式" tabindex="-1"><a class="header-anchor" href="#全局样式与局部样式"><span>全局样式与局部样式</span></a></h3><p>定义在 <code>app.wxss</code> 文件中的样式被视为全局样式，全局样式适用于小程序内的所有页面，使用全局样式可以确保小程序内各个页面在视觉上保持一致性，适合定义整个应用通用的样式规则，如字体、颜色主题等。</p><p>局部样式是在单个页面的<code>.wxss</code>文件中定义的样式，仅适用于该页面。每个页面可以有自己的<code>.wxss</code>文件，其中定义的样式规则只会影响该页面，不会对其他页面产生影响，主要用于定义页面特有的样式规则，如该页面特定布局、控件的外观等。</p><p>当全局样式与局部样式发生冲突时，局部样式会覆盖全局样式。</p><h3 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器"><span>选择器</span></a></h3><p>WXSS 支持多种选择器，用于定位和应用样式到页面的不同元素，如下所示：</p><ol><li><p><strong>.class选择器</strong>：</p><ul><li><strong>样例</strong>：<code>.intro</code></li><li><strong>描述</strong>：选择所有拥有<code>class=&quot;intro&quot;</code>的组件。类选择器用于应用样式到所有具有指定类名的元素。</li></ul></li><li><p><strong>#id选择器</strong>：</p><ul><li><strong>样例</strong>：<code>#firstname</code></li><li><strong>描述</strong>：选择拥有<code>id=&quot;firstname&quot;</code>的组件。ID选择器用于标识页面上的唯一元素。</li></ul></li><li><p><strong>element选择器</strong>：</p><ul><li><strong>样例</strong>：<code>view</code></li><li><strong>描述</strong>：选择所有<code>view</code>组件。元素选择器会用于根据小程序的组件类型来应用样式，如<code>view</code>、<code>text</code>等。</li></ul></li><li><p><strong>element, element选择器</strong>：</p><ul><li><strong>样例</strong>：<code>view, checkbox</code></li><li><strong>描述</strong>：选择所有文档的<code>view</code>组件和所有的<code>checkbox</code>组件。组合选择器允许同时对多种类型的元素应用相同的样式。</li></ul></li><li><p><strong>::after伪元素选择器</strong>：</p><ul><li><strong>样例</strong>：<code>view::after</code></li><li><strong>描述</strong>：在<code>view</code>组件后边插入内容。伪元素选择器<code>::after</code>用于在选定元素的内容之后插入新的内容。</li></ul></li><li><p><strong>::before伪元素选择器</strong>：</p><ul><li><strong>样例</strong>：<code>view::before</code></li><li><strong>描述</strong>：在<code>view</code>组件前边插入内容。伪元素选择器<code>::before</code>用于在选定元素的内容之前插入新的内容。</li></ul></li></ol><h3 id="样式导入" tabindex="-1"><a class="header-anchor" href="#样式导入"><span>样式导入</span></a></h3><p>我们可以将公共的样式规则定义在单独的文件中，然后在需要的地方通过<code>@import</code>语句进行导入，这有助于样式的复用和模块化管理。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;common.wxss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  padding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">border-box</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里表示从当前样式文件中导入<code>common.wxss</code>文件中定义的所有样式规则。<code>@import</code>语句后面跟着的是被导入的外联样式表的相对路径，路径需要用双引号<code>&quot;&quot;</code>包围。每个<code>@import</code>语句的末尾都需要用分号<code>;</code>表示语句结束。</p>`,30),r=[l];function h(o,d){return e(),s("div",null,r)}const k=i(a,[["render",h],["__file","03_组件与样式.html.vue"]]),g=JSON.parse('{"path":"/mp/03_%E7%BB%84%E4%BB%B6%E4%B8%8E%E6%A0%B7%E5%BC%8F.html","title":"组件与样式","lang":"zh-CN","frontmatter":{"title":"组件与样式","category":"前端","tag":["微信小程序"],"order":3,"date":"2024-07-17T00:00:00.000Z","description":"概述 在小程序开发中，页面的结构和样式的编写与传统的Web开发有一点点不同。 在Web开发中，页面的结构由HTML编写，使用了如 div、p、img、a 等标签来构建页面的骨架。而页面的样式（外观）由CSS负责，通过类选择器（.class）、ID选择器（#id）等规则来定义元素的外观和布局。但在开发微信小程序时，并不是使用HTML标签，而是使用小程序提...","head":[["meta",{"property":"og:url","content":"https://zheng-yi-yi.github.io/my_blog/my_blog/mp/03_%E7%BB%84%E4%BB%B6%E4%B8%8E%E6%A0%B7%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"翼的博客"}],["meta",{"property":"og:title","content":"组件与样式"}],["meta",{"property":"og:description","content":"概述 在小程序开发中，页面的结构和样式的编写与传统的Web开发有一点点不同。 在Web开发中，页面的结构由HTML编写，使用了如 div、p、img、a 等标签来构建页面的骨架。而页面的样式（外观）由CSS负责，通过类选择器（.class）、ID选择器（#id）等规则来定义元素的外观和布局。但在开发微信小程序时，并不是使用HTML标签，而是使用小程序提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T16:29:00.000Z"}],["meta",{"property":"article:author","content":"翼"}],["meta",{"property":"article:tag","content":"微信小程序"}],["meta",{"property":"article:published_time","content":"2024-07-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T16:29:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件与样式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T16:29:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"翼\\",\\"url\\":\\"https://github.com/zheng-yi-yi\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"组件 - WXML","slug":"组件-wxml","link":"#组件-wxml","children":[{"level":3,"title":"常用组件","slug":"常用组件","link":"#常用组件","children":[]},{"level":3,"title":"首页结构","slug":"首页结构","link":"#首页结构","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}]},{"level":2,"title":"样式 - WXSS","slug":"样式-wxss","link":"#样式-wxss","children":[{"level":3,"title":"rpx","slug":"rpx","link":"#rpx","children":[]},{"level":3,"title":"全局样式与局部样式","slug":"全局样式与局部样式","link":"#全局样式与局部样式","children":[]},{"level":3,"title":"选择器","slug":"选择器","link":"#选择器","children":[]},{"level":3,"title":"样式导入","slug":"样式导入","link":"#样式导入","children":[]}]}],"git":{"createdTime":1721492940000,"updatedTime":1721492940000,"contributors":[{"name":"zhengyiyi","email":"zrh182278@outlook.com","commits":1}]},"readingTime":{"minutes":5.01,"words":1504},"filePathRelative":"mp/03_组件与样式.md","localizedDate":"2024年7月17日","excerpt":"<h2>概述</h2>\\n<p>在小程序开发中，页面的结构和样式的编写与传统的Web开发有一点点不同。</p>\\n<p>在Web开发中，页面的结构由HTML编写，使用了如 <code>div</code>、<code>p</code>、<code>img</code>、<code>a</code> 等标签来构建页面的骨架。而页面的样式（外观）由CSS负责，通过类选择器（<code>.class</code>）、ID选择器（<code>#id</code>）等规则来定义元素的外观和布局。但在开发微信小程序时，并不是使用HTML标签，而是使用小程序提供的标记语言和样式语言来代替HTML和CSS。</p>","autoDesc":true}');export{k as comp,g as data};
