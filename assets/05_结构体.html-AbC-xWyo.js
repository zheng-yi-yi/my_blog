import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as n}from"./app-ChGQexam.js";const l={},t=n(`<p>在 C# 中，结构体（struct）是一种值类型（value type），用于组织和存储相关数据。结构体可用于存储各种数据类型的相关变量，使用 <code>struct</code> 关键字来创建结构体。</p><h2 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用？</span></a></h2><h3 id="定义一个结构体" tabindex="-1"><a class="header-anchor" href="#定义一个结构体"><span>定义一个结构体</span></a></h3><p>结构体内部可以包含字段、方法、属性、索引器、运算符和事件等成员。</p><p>例如，定义一个表示三维点的结构体：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Point3D</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> X</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> Z</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 构造函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Point3D</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> z</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        X</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        Z</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> z</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> DistanceToOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> X</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Z</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Z</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体的实例化" tabindex="-1"><a class="header-anchor" href="#结构体的实例化"><span>结构体的实例化</span></a></h3><p>结构体的实例化可以使用 <code>new</code> 关键字来调用构造函数：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Point3D</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> point1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Point3D</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也可以直接赋值，如果不使用 <code>new</code> 关键字，则必须初始化所有字段：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Point3D</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> point2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">point2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">point2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">point2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Z</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 6.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体实例可以使用成员运算符（<code>.</code>）来访问其成员：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">point1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">X</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出：1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">point2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">DistanceToOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出：8.774964387392123</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体的特点" tabindex="-1"><a class="header-anchor" href="#结构体的特点"><span>结构体的特点</span></a></h3><table><thead><tr><th>特点</th><th>结构体</th></tr></thead><tbody><tr><td>成员</td><td>可以包含字段、方法、属性、索引器、运算符和事件等成员。不能包含抽象方法、虚方法或受保护成员</td></tr><tr><td>构造函数</td><td>可以定义构造函数，但不能定义析构函数，也不能定义无参构造函数。无参构造函数(默认)是自动定义的，且不能被改变。</td></tr><tr><td>继承</td><td>不能继承其他结构体或类。不能作为基类被继承</td></tr><tr><td>接口</td><td>可以实现一个或多个接口</td></tr><tr><td>实例化</td><td>可以使用 new 关键字来创建结构体实例。可以不使用 new 关键字直接赋值，但需要先初始化所有字段</td></tr><tr><td>内存分配</td><td>结构体变量通常分配在栈上，效率较高。作为引用类型类成员的结构体会分配在堆上</td></tr><tr><td>可变性</td><td>默认情况下是可变的，即字段值可以修改。可以定义为只读结构体，使字段值不可变</td></tr><tr><td>应用场景</td><td>适用于表示轻量级数据，例如：点、大小、颜色、日期、时间等。常用作值类型参数或返回值。作为内部数据结构，例如集合中的元素</td></tr></tbody></table><h2 id="结构体-vs-类" tabindex="-1"><a class="header-anchor" href="#结构体-vs-类"><span>结构体 vs 类</span></a></h2><ol><li><strong>值类型与引用类型</strong>： <ul><li><strong>结构体</strong>是值类型（<code>value type</code>），这意味着当结构体被赋值给一个新的变量时，会创建该值的一个副本。</li><li><strong>类</strong>是引用类型（<code>reference type</code>），这意味着当类的实例被赋值给一个新的变量时，两个变量都引用同一个对象实例。</li></ul></li><li><strong>内存分配</strong>： <ul><li><strong>结构体</strong>的实例通常在栈上分配（尽管在闭包或作为类的成员时可以在堆上分配），这使得它们的分配和回收更快。</li><li><strong>类</strong>的实例总是在堆上分配，这可能导致更慢的分配速度和垃圾回收的开销。</li></ul></li><li><strong>继承</strong>： <ul><li><strong>结构体</strong>不能继承其他的结构体或类，但它们可以实现接口。</li><li><strong>类</strong>可以继承其他类，这意味着它们可以形成一个继承层次结构。</li></ul></li><li><strong>默认的构造函数</strong>： <ul><li><strong>结构体</strong>总是有一个默认的无参数构造函数，不能被重写。</li><li><strong>类</strong>可以没有构造函数，也可以定义一个或多个构造函数，包括无参数的构造函数。</li></ul></li><li><strong>初始化</strong>： <ul><li>在<strong>结构体</strong>中，所有的字段必须在对象被使用之前初始化。</li><li>在<strong>类</strong>中，字段可以在声明时不初始化，因为引用类型的默认值是<code>null</code>。</li></ul></li><li><strong>适用场景</strong>： <ul><li><strong>结构体</strong>适用于小型数据结构，它们封装了少量的数据，且不需要扩展。</li><li><strong>类</strong>适用于更复杂的数据结构，需要继承或需要在多个地方共享和操作同一个数据实例的场景。</li></ul></li></ol>`,17),h=[t];function e(k,p){return a(),s("div",null,h)}const g=i(l,[["render",e],["__file","05_结构体.html.vue"]]),c=JSON.parse('{"path":"/dotnet/01_chsarp/05_%E7%BB%93%E6%9E%84%E4%BD%93.html","title":"结构体","lang":"zh-CN","frontmatter":{"title":"结构体","category":"后端","tag":["C#",".NET"],"order":5,"date":"2024-07-20T00:00:00.000Z","description":"在 C# 中，结构体（struct）是一种值类型（value type），用于组织和存储相关数据。结构体可用于存储各种数据类型的相关变量，使用 struct 关键字来创建结构体。 如何使用？ 定义一个结构体 结构体内部可以包含字段、方法、属性、索引器、运算符和事件等成员。 例如，定义一个表示三维点的结构体： 结构体的实例化 结构体的实例化可以使用 ne...","head":[["meta",{"property":"og:url","content":"https://zheng-yi-yi.github.io/my_blog/my_blog/dotnet/01_chsarp/05_%E7%BB%93%E6%9E%84%E4%BD%93.html"}],["meta",{"property":"og:site_name","content":"翼的博客"}],["meta",{"property":"og:title","content":"结构体"}],["meta",{"property":"og:description","content":"在 C# 中，结构体（struct）是一种值类型（value type），用于组织和存储相关数据。结构体可用于存储各种数据类型的相关变量，使用 struct 关键字来创建结构体。 如何使用？ 定义一个结构体 结构体内部可以包含字段、方法、属性、索引器、运算符和事件等成员。 例如，定义一个表示三维点的结构体： 结构体的实例化 结构体的实例化可以使用 ne..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T16:29:00.000Z"}],["meta",{"property":"article:author","content":"翼"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":".NET"}],["meta",{"property":"article:published_time","content":"2024-07-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T16:29:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构体\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T16:29:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"翼\\",\\"url\\":\\"https://github.com/zheng-yi-yi\\"}]}"]]},"headers":[{"level":2,"title":"如何使用？","slug":"如何使用","link":"#如何使用","children":[{"level":3,"title":"定义一个结构体","slug":"定义一个结构体","link":"#定义一个结构体","children":[]},{"level":3,"title":"结构体的实例化","slug":"结构体的实例化","link":"#结构体的实例化","children":[]},{"level":3,"title":"结构体的特点","slug":"结构体的特点","link":"#结构体的特点","children":[]}]},{"level":2,"title":"结构体 vs 类","slug":"结构体-vs-类","link":"#结构体-vs-类","children":[]}],"git":{"createdTime":1721492940000,"updatedTime":1721492940000,"contributors":[{"name":"zhengyiyi","email":"zrh182278@outlook.com","commits":1}]},"readingTime":{"minutes":3.36,"words":1008},"filePathRelative":"dotnet/01_chsarp/05_结构体.md","localizedDate":"2024年7月20日","excerpt":"<p>在 C# 中，结构体（struct）是一种值类型（value type），用于组织和存储相关数据。结构体可用于存储各种数据类型的相关变量，使用 <code>struct</code> 关键字来创建结构体。</p>\\n<h2>如何使用？</h2>\\n<h3>定义一个结构体</h3>\\n<p>结构体内部可以包含字段、方法、属性、索引器、运算符和事件等成员。</p>\\n<p>例如，定义一个表示三维点的结构体：</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"csharp\\" data-title=\\"csharp\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">struct</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\"> Point3D</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> double</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E06C75\\"> X</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> double</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E06C75\\"> Y</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> double</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E06C75\\"> Z</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">    // 构造函数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> Point3D</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">double</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\"> x</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">double</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\"> y</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">double</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\"> z</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">        X</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> x</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">        Y</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> y</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">        Z</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> z</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">    // 方法</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> double</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> DistanceToOrigin</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">        return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\"> Math</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">Sqrt</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">X</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> *</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> X</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> Y</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> *</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> Y</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> Z</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> *</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> Z</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{g as comp,c as data};
