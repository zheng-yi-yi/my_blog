import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as a}from"./app-ChGQexam.js";const n={},t=a(`<h2 id="预处理器指令概述" tabindex="-1"><a class="header-anchor" href="#预处理器指令概述"><span>预处理器指令概述</span></a></h2><p>预处理器指令（Preprocessor Directives）是编译器在实际编译代码之前执行的指令。通过这些指令，开发者可以控制编译器如何处理源代码的不同部分，例如条件编译。所有预处理器指令都以 <code>#</code> 开头，并且必须是该行上的唯一指令。</p><blockquote><p>预处理器指令不是C#语句，因此不需要以分号 <code>;</code> 结束。</p></blockquote><p>C# 预处理器指令与C和C++中的不同之处在于，它们不用于创建宏，而主要用于条件编译和控制编译过程。</p><h2 id="常见的预处理器指令" tabindex="-1"><a class="header-anchor" href="#常见的预处理器指令"><span>常见的预处理器指令</span></a></h2><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>#define</code></td><td>定义一个符号，用于条件编译。</td></tr><tr><td><code>#undef</code></td><td>取消定义一个符号。</td></tr><tr><td><code>#if</code></td><td>开始一个条件编译块，如果符号被定义则包含代码块。</td></tr><tr><td><code>#elif</code></td><td>如果前面的 <code>#if</code> 或 <code>#elif</code> 条件不满足，且当前条件满足，则包含代码块。</td></tr><tr><td><code>#else</code></td><td>如果前面的 <code>#if</code> 或 <code>#elif</code> 条件不满足，则包含代码块。</td></tr><tr><td><code>#endif</code></td><td>结束一个条件编译块。</td></tr><tr><td><code>#warning</code></td><td>生成编译器警告信息。</td></tr><tr><td><code>#error</code></td><td>生成编译器错误信息。</td></tr><tr><td><code>#region</code></td><td>标记一段代码区域，可以在IDE中折叠和展开这段代码。</td></tr><tr><td><code>#endregion</code></td><td>结束一个代码区域。</td></tr><tr><td><code>#line</code></td><td>更改编译器输出中的行号和文件名，用于调试或生成工具的代码。</td></tr><tr><td><code>#pragma</code></td><td>给编译器发送特殊指令，例如禁用或恢复特定的警告。</td></tr><tr><td><code>#nullable</code></td><td>控制可空性上下文和注释，启用或禁用对可空引用类型的编译器检查。</td></tr></tbody></table><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><h3 id="条件编译" tabindex="-1"><a class="header-anchor" href="#条件编译"><span>条件编译</span></a></h3><p>使用 <code>#define</code> 和 <code>#undef</code> 定义或取消定义符号，然后使用 <code>#if</code>、<code>#elif</code>、<code>#else</code> 和 <code>#endif</code> 进行条件编译。例如：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> DEBUG</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> DEBUG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Debug mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">elif</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> RELEASE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Release mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Other mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，如果定义了 <code>DEBUG</code> 符号，则编译器会包含 <code>Console.WriteLine(&quot;Debug mode&quot;);</code> 语句。</p><h3 id="生成警告和错误" tabindex="-1"><a class="header-anchor" href="#生成警告和错误"><span>生成警告和错误</span></a></h3><p>使用 <code>#warning</code> 和 <code>#error</code> 生成编译器警告和错误信息。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">warning</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> This is a warning message</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">error</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> This is an error message</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码区域" tabindex="-1"><a class="header-anchor" href="#代码区域"><span>代码区域</span></a></h3><p>使用 <code>#region</code> 和 <code>#endregion</code> 定义代码区域，可以在IDE中折叠和展开这段代码。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">region</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> MyRegion</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Your code here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">endregion</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更改行号和文件名" tabindex="-1"><a class="header-anchor" href="#更改行号和文件名"><span>更改行号和文件名</span></a></h3><p>使用 <code>#line</code> 更改编译器输出中的行号和文件名，便于调试。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">line</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;MyFile.cs&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// The next line will be reported as line 100 in MyFile.cs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;This is line 100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">line</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> default</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// Line numbering returns to normal</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译器指令" tabindex="-1"><a class="header-anchor" href="#编译器指令"><span>编译器指令</span></a></h3><p>使用 <code>#pragma</code> 向编译器发送特殊指令，例如禁用或恢复特定的警告。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> disable</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 414</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> unusedVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> restore</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 414</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可空性上下文" tabindex="-1"><a class="header-anchor" href="#可空性上下文"><span>可空性上下文</span></a></h3><p>使用 <code>#nullable</code> 控制可空性上下文和注释。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#nullable enable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">nullableString</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#nullable disable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="define-和-undef" tabindex="-1"><a class="header-anchor" href="#define-和-undef"><span>#define 和 #undef</span></a></h2><p><code>#define</code> 用于定义符号，通常用于条件编译。<code>#undef</code> 用于取消定义符号。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> DEBUG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">undef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> RELEASE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> DEBUG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Debug mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用 <code>#define</code> 和 <code>#undef</code>，可以灵活地控制代码的编译部分，使其适应不同的环境和需求。</p>`,30),l=[t];function h(d,r){return e(),s("div",null,l)}const c=i(n,[["render",h],["__file","10_预处理器.html.vue"]]),o=JSON.parse('{"path":"/dotnet/01_chsarp/10_%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8.html","title":"预处理器指令","lang":"zh-CN","frontmatter":{"title":"预处理器指令","category":"后端","tag":["C#",".NET"],"order":9,"date":"2024-07-21T00:00:00.000Z","description":"预处理器指令概述 预处理器指令（Preprocessor Directives）是编译器在实际编译代码之前执行的指令。通过这些指令，开发者可以控制编译器如何处理源代码的不同部分，例如条件编译。所有预处理器指令都以 # 开头，并且必须是该行上的唯一指令。 预处理器指令不是C#语句，因此不需要以分号 ; 结束。 C# 预处理器指令与C和C++中的不同之处在...","head":[["meta",{"property":"og:url","content":"https://zheng-yi-yi.github.io/my_blog/my_blog/dotnet/01_chsarp/10_%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"翼的博客"}],["meta",{"property":"og:title","content":"预处理器指令"}],["meta",{"property":"og:description","content":"预处理器指令概述 预处理器指令（Preprocessor Directives）是编译器在实际编译代码之前执行的指令。通过这些指令，开发者可以控制编译器如何处理源代码的不同部分，例如条件编译。所有预处理器指令都以 # 开头，并且必须是该行上的唯一指令。 预处理器指令不是C#语句，因此不需要以分号 ; 结束。 C# 预处理器指令与C和C++中的不同之处在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T16:29:00.000Z"}],["meta",{"property":"article:author","content":"翼"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":".NET"}],["meta",{"property":"article:published_time","content":"2024-07-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T16:29:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"预处理器指令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T16:29:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"翼\\",\\"url\\":\\"https://github.com/zheng-yi-yi\\"}]}"]]},"headers":[{"level":2,"title":"预处理器指令概述","slug":"预处理器指令概述","link":"#预处理器指令概述","children":[]},{"level":2,"title":"常见的预处理器指令","slug":"常见的预处理器指令","link":"#常见的预处理器指令","children":[]},{"level":2,"title":"实例","slug":"实例","link":"#实例","children":[{"level":3,"title":"条件编译","slug":"条件编译","link":"#条件编译","children":[]},{"level":3,"title":"生成警告和错误","slug":"生成警告和错误","link":"#生成警告和错误","children":[]},{"level":3,"title":"代码区域","slug":"代码区域","link":"#代码区域","children":[]},{"level":3,"title":"更改行号和文件名","slug":"更改行号和文件名","link":"#更改行号和文件名","children":[]},{"level":3,"title":"编译器指令","slug":"编译器指令","link":"#编译器指令","children":[]},{"level":3,"title":"可空性上下文","slug":"可空性上下文","link":"#可空性上下文","children":[]}]},{"level":2,"title":"#define 和 #undef","slug":"define-和-undef","link":"#define-和-undef","children":[]}],"git":{"createdTime":1721492940000,"updatedTime":1721492940000,"contributors":[{"name":"zhengyiyi","email":"zrh182278@outlook.com","commits":1}]},"readingTime":{"minutes":2.6,"words":780},"filePathRelative":"dotnet/01_chsarp/10_预处理器.md","localizedDate":"2024年7月21日","excerpt":"<h2>预处理器指令概述</h2>\\n<p>预处理器指令（Preprocessor Directives）是编译器在实际编译代码之前执行的指令。通过这些指令，开发者可以控制编译器如何处理源代码的不同部分，例如条件编译。所有预处理器指令都以 <code>#</code> 开头，并且必须是该行上的唯一指令。</p>\\n<blockquote>\\n<p>预处理器指令不是C#语句，因此不需要以分号 <code>;</code> 结束。</p>\\n</blockquote>\\n<p>C# 预处理器指令与C和C++中的不同之处在于，它们不用于创建宏，而主要用于条件编译和控制编译过程。</p>\\n<h2>常见的预处理器指令</h2>","autoDesc":true}');export{c as comp,o as data};
