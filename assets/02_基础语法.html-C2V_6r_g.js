import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as s,d as a}from"./app-BOvJWVDp.js";const t="/my_blog/assets/image-20240715235011128-m6yeDBzk.png",n={},l=a(`<h1 id="程序结构" tabindex="-1"><a class="header-anchor" href="#程序结构"><span>程序结构</span></a></h1><p>C# 是一种强类型、面向对象的编程语言，它由微软开发，并作为.NET框架的一部分。C# 语言的设计目标是提供一种简单、现代、通用的编程语言。</p><h3 id="注释与基础语法" tabindex="-1"><a class="header-anchor" href="#注释与基础语法"><span>注释与基础语法</span></a></h3><p>C# 源代码文件的后缀为 <code>.cs</code>。</p><p>单行注释使用两个斜杠<code>//</code>，例如：<code>// 这是一个单行注释</code></p><p>多行注释或块注释使用 <code>/*</code> 开始，<code>*/</code> 结束，例如：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">这是一个多行注释。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">可以跨越多行。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C# 是大小写敏感的语言。这意味着，例如，变量名 <code>myVariable</code> 和 <code>MyVariable</code> 会被视为两个不同的变量。所有语句和表达式都必须以分号（<code>;</code>）结尾。这告诉编译器一个语句已经结束，下一个语句即将开始。与 Java 不同，C# 允许文件名与其中定义的类的名称不同。这意味着你可以在一个名为 <code>MyProgram.cs</code> 的文件中定义一个名为 <code>Program</code> 的类。</p><h3 id="最小的c-程序" tabindex="-1"><a class="header-anchor" href="#最小的c-程序"><span>最小的C#程序</span></a></h3><p>在C#中，每个可执行程序都必须包含一个<code>Main</code>方法。这个方法是程序的入口点，是程序开始执行的地方。<code>Main</code>方法可以包含在类或结构中，但最常见的做法是将其放在类中。</p><p>下面是一个最小的C#程序示例，它仅包含一个包含<code>Main</code>方法的类：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要点：</p><ul><li><p><code>using System;</code>：这一行是一个<code>using</code>指令，它告诉编译器我们将在程序中使用<code>System</code>命名空间。<code>System</code>命名空间包含定义基本系统功能的类型，例如控制台输入/输出（I/O）。</p></li><li><p><code>class Program</code>：这定义了一个名为<code>Program</code>的类。在C#中，类是对象的蓝图。虽然我们的程序很简单，不涉及面向对象编程的复杂性，但<code>Main</code>方法必须位于类或结构中。</p></li><li><p><code>static void Main()</code>：这定义了一个名为<code>Main</code>的方法。<code>static</code>关键字表示这个方法属于类本身，而不是类的实例。<code>void</code>关键字表示这个方法不返回值。<code>Main</code>方法的括号中可以包含参数，用于接收命令行参数。</p></li><li><p><code>Console.WriteLine(&quot;Hello, World!&quot;);</code>：这一行代码使用<code>Console</code>类的<code>WriteLine</code>方法在控制台上输出文本“Hello, World!”。<code>Console</code>类是<code>System</code>命名空间的一部分，用于控制台应用程序的输入和输出。</p></li></ul><h3 id="编译和运行" tabindex="-1"><a class="header-anchor" href="#编译和运行"><span>编译和运行</span></a></h3><p>我们可以在Visual Studio中创建一个新的控制台应用程序项目（Console Application），将上述代码粘贴到主类中，然后编译并运行项目：</p><figure><img src="`+t+'" alt="Hello World" tabindex="0" loading="lazy"><figcaption>Hello World</figcaption></figure>',17),d=[l];function o(c,h){return s(),e("div",null,d)}const k=i(n,[["render",o],["__file","02_基础语法.html.vue"]]),g=JSON.parse('{"path":"/dotnet/01_chsarp/02_%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html","title":"基础语法","lang":"zh-CN","frontmatter":{"title":"基础语法","category":"后端","tag":["C#",".NET"],"order":2,"date":"2024-07-15T00:00:00.000Z","description":"程序结构 C# 是一种强类型、面向对象的编程语言，它由微软开发，并作为.NET框架的一部分。C# 语言的设计目标是提供一种简单、现代、通用的编程语言。 注释与基础语法 C# 源代码文件的后缀为 .cs。 单行注释使用两个斜杠//，例如：// 这是一个单行注释 多行注释或块注释使用 /* 开始，*/ 结束，例如： C# 是大小写敏感的语言。这意味着，例如...","head":[["meta",{"property":"og:url","content":"https://zheng-yi-yi.github.io/my_blog/my_blog/dotnet/01_chsarp/02_%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"翼的博客"}],["meta",{"property":"og:title","content":"基础语法"}],["meta",{"property":"og:description","content":"程序结构 C# 是一种强类型、面向对象的编程语言，它由微软开发，并作为.NET框架的一部分。C# 语言的设计目标是提供一种简单、现代、通用的编程语言。 注释与基础语法 C# 源代码文件的后缀为 .cs。 单行注释使用两个斜杠//，例如：// 这是一个单行注释 多行注释或块注释使用 /* 开始，*/ 结束，例如： C# 是大小写敏感的语言。这意味着，例如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-15T16:04:59.000Z"}],["meta",{"property":"article:author","content":"翼"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":".NET"}],["meta",{"property":"article:published_time","content":"2024-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-15T16:04:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础语法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-15T16:04:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"翼\\",\\"url\\":\\"https://github.com/zheng-yi-yi\\"}]}"]]},"headers":[{"level":3,"title":"注释与基础语法","slug":"注释与基础语法","link":"#注释与基础语法","children":[]},{"level":3,"title":"最小的C#程序","slug":"最小的c-程序","link":"#最小的c-程序","children":[]},{"level":3,"title":"编译和运行","slug":"编译和运行","link":"#编译和运行","children":[]}],"git":{"createdTime":1721059499000,"updatedTime":1721059499000,"contributors":[{"name":"zhengyiyi","email":"zrh182278@outlook.com","commits":1}]},"readingTime":{"minutes":2.3,"words":690},"filePathRelative":"dotnet/01_chsarp/02_基础语法.md","localizedDate":"2024年7月15日","excerpt":"\\n<p>C# 是一种强类型、面向对象的编程语言，它由微软开发，并作为.NET框架的一部分。C# 语言的设计目标是提供一种简单、现代、通用的编程语言。</p>\\n<h3>注释与基础语法</h3>\\n<p>C# 源代码文件的后缀为 <code>.cs</code>。</p>\\n<p>单行注释使用两个斜杠<code>//</code>，例如：<code>// 这是一个单行注释</code></p>\\n<p>多行注释或块注释使用 <code>/*</code> 开始，<code>*/</code> 结束，例如：</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"csharp\\" data-title=\\"csharp\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">这是一个多行注释。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">可以跨越多行。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">*/</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,g as data};
