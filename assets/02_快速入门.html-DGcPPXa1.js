import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as a}from"./app-ChGQexam.js";const t="/my_blog/assets/image-20240718092608461-OIkP9BF0.png",n="/my_blog/assets/image-20240718093838652-ejHzLPSh.png",l="/my_blog/assets/image-20240718093330353-huhMe9Dh.png",h="/my_blog/assets/image-20240718094953540-DnN7sZWI.png",p="/my_blog/assets/image-20240718095231504-jncw4I_E.png",d="/my_blog/assets/image-20240718095357570-CmEZU4Qg.png",r="/my_blog/assets/image-20240718095516170-BnyGzNwY.png",o="/my_blog/assets/image-20240718110336848-BA-khlw-.png",k="/my_blog/assets/image-20240719080723692-Cwbjfm1I.png",g="/my_blog/assets/image-20240719081229395-Bgo9fvRX.png",c="/my_blog/assets/image-20240719081710213-BoLXpQft.png",m="/my_blog/assets/image-20240719153242029-DEHMiHiB.png",b={},y=a('<h2 id="todo-list" tabindex="-1"><a class="header-anchor" href="#todo-list"><span>todo list</span></a></h2><p>下面，我们一起跟着官方文档，构建一个简单的代办事项应用程序。</p><h2 id="创建解决方案" tabindex="-1"><a class="header-anchor" href="#创建解决方案"><span>创建解决方案</span></a></h2><p>首先，请确保你已经安装了 ABP CLI，可运行以下命令来安装它：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Volo.Abp.Cli</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接着，打开你的工作目录，运行以下命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">abp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> TodoApp</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> angular</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上述命令使用 <code>ABP CLI</code> 创建了一个解决方案，名为 &quot;<code>TodoApp</code>&quot;，同时使用 <code>Angular</code> 作为其前端UI框架。</p><p>完成后，我们就得到一个预配置的全栈应用程序，此时包含两个文件夹：</p><figure><img src="'+t+'" alt="项目根目录" tabindex="0" loading="lazy"><figcaption>项目根目录</figcaption></figure><h2 id="创建并初始化数据库" tabindex="-1"><a class="header-anchor" href="#创建并初始化数据库"><span>创建并初始化数据库</span></a></h2><p>我们用 Visual Studio 打开 <code>aspnet-core</code> 项目下的解决方案 <code>TodoApp.sln</code>，然后右键单击<code>TodoApp.DbMigrator</code>项目，将其配置为启动项目：</p><figure><img src="'+n+'" alt="设置启动项目" tabindex="0" loading="lazy"><figcaption>设置启动项目</figcaption></figure><p>接着运行该项目，此时会<strong>创建数据库并生成初始数据</strong>：</p><figure><img src="'+l+'" alt="运行项目" tabindex="0" loading="lazy"><figcaption>运行项目</figcaption></figure><h2 id="运行应用程序" tabindex="-1"><a class="header-anchor" href="#运行应用程序"><span>运行应用程序</span></a></h2><p>我们再将启动项目设置为 <code>TodoApp.HttpApi.Host</code> ，该项目承载服务器端HTTP API。</p><figure><img src="'+h+'" alt="运行TodoApp.HttpApi.Host项目" tabindex="0" loading="lazy"><figcaption>运行TodoApp.HttpApi.Host项目</figcaption></figure><p>项目运行成功后会自动打开浏览器，访问该项目的 <a href="https://swagger.io/tools/swagger-ui/" target="_blank" rel="noopener noreferrer">Swagger UI</a> 页面，此时我们可以查看服务端的 HTTP API。</p><p>如果出现以下错误：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Unable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> bind</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> https://localhost:44315</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> IPv4</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> loopback</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> interface:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;以一种访问权限不允许的方式做了一个访问套接字的尝试。&#39;.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+p+'" alt="404错误" tabindex="0" loading="lazy"><figcaption>404错误</figcaption></figure><p>那可能是因为端口已经被另一个应用程序占用，我们可以手动修改端口，请修改项目的配置文件，将访问端口改为其他的，比如 <code>44316</code>：</p><figure><img src="'+d+'" alt="修改端口" tabindex="0" loading="lazy"><figcaption>修改端口</figcaption></figure><p><code>TodoApp.HttpApi.Host</code>项目成功运行后的界面如下：</p><figure><img src="'+r+'" alt="项目运行效果" tabindex="0" loading="lazy"><figcaption>项目运行效果</figcaption></figure><h2 id="运行前端项目" tabindex="-1"><a class="header-anchor" href="#运行前端项目"><span>运行前端项目</span></a></h2><p>我们打开终端命令行窗口，进入 <code>angular</code> 项目，运行以下命令进行依赖安装：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后运行以下命令，启动应用：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>成功运行后，浏览器会打开前端页面，效果如下：</p><figure><img src="'+o+`" alt="前端页面" tabindex="0" loading="lazy"><figcaption>前端页面</figcaption></figure><p>我们可以点击登录按钮，初始账号信息如下：</p><ul><li>用户名：<code>admin</code></li><li>密码：<code>1q2w3E*</code></li></ul><h2 id="创建实体" tabindex="-1"><a class="header-anchor" href="#创建实体"><span>创建实体</span></a></h2><p>在领域驱动设计（DDD）中，实体是核心概念，它代表了具有唯一标识的对象，通常会随着业务操作而改变它的状态。实体通常映射到关系型数据库的表中。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>实体的主要特征是即使其属性发生变化，只要其唯一标识（ID）保持不变，它仍然被认为是同一个实体。例如，一个人的姓名、地址等信息可能会变，但只要身份证号（假设用作唯一标识）不变，那么无论他的哪些属性如何变化，都认为是同一个人。</p></div><p>接下来，我们在 <code>TodoApp.Domain</code> 项目中新建一个 <code>TodoItem</code> 类：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Volo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Abp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Domain</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Entities</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> TodoApp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> TodoItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">BasicAggregateRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Guid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BasicAggregateRoot</code> 是创建根实体的最简单的基础类。这表明 <code>TodoItem</code> 是一个聚合根，是领域驱动设计中的一个概念，代表领域模型的根实体。 <code>Guid</code> 是这里实体的主键 (<code>Id</code>)。</p><figure><img src="`+k+'" alt="image-20240719080723692" tabindex="0" loading="lazy"><figcaption>image-20240719080723692</figcaption></figure><p>下面，我们来设置 <a href="https://docs.abp.io/zh-Hans/abp/latest/Entity-Framework-Core" target="_blank" rel="noopener noreferrer">Entity Framework Core</a> 配置。</p><h2 id="将实体映射到数据库中的表" tabindex="-1"><a class="header-anchor" href="#将实体映射到数据库中的表"><span>将实体映射到数据库中的表</span></a></h2><p>打开在 <code>TodoApp.EntityFrameworkCore</code> 项目中 <code>EntityFrameworkCore</code> 文件夹中的 <code>TodoAppDbContext</code> 类, 并向该类添加新的 <code>DbSet</code> 属性:</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> DbSet</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">TodoItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> TodoItems</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+g+`" alt="添加新的DbSet属性" tabindex="0" loading="lazy"><figcaption>添加新的DbSet属性</figcaption></figure><p>然后在当前这个 <code>TodoAppDbContext</code> 类中找到 <code>OnModelCreating</code> 方法，并为 <code>TodoItem</code> 实体添加映射代码:</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Entity</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">TodoItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">	b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ToTable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;TodoItems&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+'" alt="为实体添加映射" tabindex="0" loading="lazy"><figcaption>为实体添加映射</figcaption></figure><p>现在，我们就已经将 <code>TodoItem</code> 实体映射到数据库中的 <code>TodoItems</code> 表。</p><h2 id="code-first-迁移" tabindex="-1"><a class="header-anchor" href="#code-first-迁移"><span>Code First 迁移</span></a></h2><p>该模板配置的是Entity Framework Core的 <a href="https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations" target="_blank" rel="noopener noreferrer">Code First 迁移</a>。</p><p>由于我们更改了数据库映射配置，因此需要创建一个新的迁移并将更改应用于数据库。</p><p>在 <code>TodoApp.EntityFrameworkCore</code> 项目目录中打开一个命令行终端并输入以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ef</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> migrations</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Added_TodoItem</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将向项目添加一个新的迁移类。接着运行这条命令，将更改应用于数据库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ef</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> database</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> update</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+m+'" alt="迁移" tabindex="0" loading="lazy"><figcaption>迁移</figcaption></figure><p>现在，我们可以使用ABP仓库保存和检索待办事项。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3>',61),u=[y];function f(B,v){return e(),s("div",null,u)}const A=i(b,[["render",f],["__file","02_快速入门.html.vue"]]),E=JSON.parse('{"path":"/dotnet/04_ABP/02_%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html","title":"快速上手","lang":"zh-CN","frontmatter":{"title":"快速上手","category":"框架","tag":["C#",".NET","ASP.NET Core"],"order":2,"date":"2024-07-18T00:00:00.000Z","description":"todo list 下面，我们一起跟着官方文档，构建一个简单的代办事项应用程序。 创建解决方案 首先，请确保你已经安装了 ABP CLI，可运行以下命令来安装它： 接着，打开你的工作目录，运行以下命令： 上述命令使用 ABP CLI 创建了一个解决方案，名为 \\"TodoApp\\"，同时使用 Angular 作为其前端UI框架。 完成后，我们就得到一个预配...","head":[["meta",{"property":"og:url","content":"https://zheng-yi-yi.github.io/my_blog/my_blog/dotnet/04_ABP/02_%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"翼的博客"}],["meta",{"property":"og:title","content":"快速上手"}],["meta",{"property":"og:description","content":"todo list 下面，我们一起跟着官方文档，构建一个简单的代办事项应用程序。 创建解决方案 首先，请确保你已经安装了 ABP CLI，可运行以下命令来安装它： 接着，打开你的工作目录，运行以下命令： 上述命令使用 ABP CLI 创建了一个解决方案，名为 \\"TodoApp\\"，同时使用 Angular 作为其前端UI框架。 完成后，我们就得到一个预配..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T16:29:00.000Z"}],["meta",{"property":"article:author","content":"翼"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":".NET"}],["meta",{"property":"article:tag","content":"ASP.NET Core"}],["meta",{"property":"article:published_time","content":"2024-07-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T16:29:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速上手\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T16:29:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"翼\\",\\"url\\":\\"https://github.com/zheng-yi-yi\\"}]}"]]},"headers":[{"level":2,"title":"todo list","slug":"todo-list","link":"#todo-list","children":[]},{"level":2,"title":"创建解决方案","slug":"创建解决方案","link":"#创建解决方案","children":[]},{"level":2,"title":"创建并初始化数据库","slug":"创建并初始化数据库","link":"#创建并初始化数据库","children":[]},{"level":2,"title":"运行应用程序","slug":"运行应用程序","link":"#运行应用程序","children":[]},{"level":2,"title":"运行前端项目","slug":"运行前端项目","link":"#运行前端项目","children":[]},{"level":2,"title":"创建实体","slug":"创建实体","link":"#创建实体","children":[]},{"level":2,"title":"将实体映射到数据库中的表","slug":"将实体映射到数据库中的表","link":"#将实体映射到数据库中的表","children":[]},{"level":2,"title":"Code First 迁移","slug":"code-first-迁移","link":"#code-first-迁移","children":[{"level":3,"title":"","slug":"","link":"#","children":[]}]}],"git":{"createdTime":1721492940000,"updatedTime":1721492940000,"contributors":[{"name":"zhengyiyi","email":"zrh182278@outlook.com","commits":1}]},"readingTime":{"minutes":3.89,"words":1167},"filePathRelative":"dotnet/04_ABP/02_快速入门.md","localizedDate":"2024年7月18日","excerpt":"<h2>todo list</h2>\\n<p>下面，我们一起跟着官方文档，构建一个简单的代办事项应用程序。</p>\\n<h2>创建解决方案</h2>\\n<p>首先，请确保你已经安装了 ABP CLI，可运行以下命令来安装它：</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">dotnet</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> tool</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> install</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -g</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> Volo.Abp.Cli</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{A as comp,E as data};
